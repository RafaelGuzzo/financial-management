version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: ${COMPOSE_PROJECT_NAME}_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/docker/postgres-init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  backend:
    build:
      context: ./backend
    container_name: ${COMPOSE_PROJECT_NAME}_backend
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${BACKEND_PORT}:8080"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://${COMPOSE_PROJECT_NAME}_postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ACCESS_TOKEN_EXPIRATION: ${JWT_ACCESS_TOKEN_EXPIRATION}
      JWT_REFRESH_TOKEN_EXPIRATION: ${JWT_REFRESH_TOKEN_EXPIRATION}
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 20s
      timeout: 5s
      retries: 6
      start_period: 40s

  frontend:
    build:
      context: ./frontend
    container_name: ${COMPOSE_PROJECT_NAME}_frontend
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "${FRONTEND_PORT}:80"
    environment:
      API_URL: http://backend:8080
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
